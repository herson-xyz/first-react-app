{"ast":null,"code":"var _jsxFileName = \"/Users/project404/Studio/Github/first-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Clicker from \"./Clicker.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [hasClicker, setHasClicker] = useState(true); // Simple way to think about it: If it's a variable that changes the app, it's a state variable\n\n  const toggleClickerClick = () => {\n    setHasClicker(!hasClicker); // If it's true, return false. And vice versa.   \n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleClickerClick,\n      children: [hasClicker ? 'Hide' : 'Show', \" Clicker\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), \"         \", hasClicker && /*#__PURE__*/_jsxDEV(Clicker, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 25\n    }, this), \"                                                                   \"]\n  }, void 0, true);\n}\n_s(App, \"Kl7VdfqzzvUQNyEvcseDfqraP64=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Clicker","App","hasClicker","setHasClicker","toggleClickerClick"],"sources":["/Users/project404/Studio/Github/first-react-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Clicker from \"./Clicker.js\";\n\nexport default function App()\n{\nconst [hasClicker, setHasClicker] = useState(true)                                                      // Simple way to think about it: If it's a variable that changes the app, it's a state variable\n\n    const toggleClickerClick = () =>\n    {\n        setHasClicker(!hasClicker)                                                                      // If it's true, return false. And vice versa.   \n    }\n\n    return <>\n        <button onClick={ toggleClickerClick }>{ hasClicker ? 'Hide' : 'Show'} Clicker</button>         {/*// Do not call the function. Provide the function. */}\n        {/* { hasClicker ? <Clicker /> : null} */}\n        { hasClicker && <Clicker /> }                                                                   {/* This is a condensed way of doing the same as the previous line*/}\n    </>\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,cAAc;AAAC;AAAA;AAEnC,eAAe,SAASC,GAAG,GAC3B;EAAA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC,EAAsD;;EAEpG,MAAMK,kBAAkB,GAAG,MAC3B;IACID,aAAa,CAAC,CAACD,UAAU,CAAC,EAAsE;EACpG,CAAC;;EAED,oBAAO;IAAA,wBACH;MAAQ,OAAO,EAAGE,kBAAoB;MAAA,WAAGF,UAAU,GAAG,MAAM,GAAG,MAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAErFA,UAAU,iBAAI,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA,gBAC5B;AACP;AAAC,GAduBD,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}