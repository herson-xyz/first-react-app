{"ast":null,"code":"var _jsxFileName = \"/Users/project404/Studio/Github/first-react-app/src/Clicker.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Clicker() {\n  _s();\n  // const countState = useState(0) // A cleaner way to do this is to destructure. See example below:\n  // const count = countState[0]\n  // const setCount = countState[1]\n\n  const [count, setCount] = useState(0);\n  const buttonClick = () => {\n    // setCount(value + 1) // this method doesn't work as well with async processes. We can get stale values. For better results, use method below.\n    setCount(value => value + 1); // simplified arrow function, (value) => { return value + 1 }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Clicks count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: buttonClick,\n      children: \"Click Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 12\n  }, this);\n}\n_s(Clicker, \"H/YKQqcLmyTq65rNIpgB/HnQdCA=\");\n_c = Clicker;\nvar _c;\n$RefreshReg$(_c, \"Clicker\");","map":{"version":3,"names":["useState","Clicker","count","setCount","buttonClick","value"],"sources":["/Users/project404/Studio/Github/first-react-app/src/Clicker.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function Clicker()\n{\n    \n    // const countState = useState(0) // A cleaner way to do this is to destructure. See example below:\n    // const count = countState[0]\n    // const setCount = countState[1]\n\n    const [ count, setCount] = useState(0)\n\n    const buttonClick = () =>\n    {\n        // setCount(value + 1) // this method doesn't work as well with async processes. We can get stale values. For better results, use method below.\n        setCount(value => value + 1) // simplified arrow function, (value) => { return value + 1 }\n    }\n\n    return <div>\n        <div>Clicks count: { count }</div>\n        <button onClick={ buttonClick }>Click Me</button>\n    </div>\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAEjC,eAAe,SAASC,OAAO,GAC/B;EAAA;EAEI;EACA;EACA;;EAEA,MAAM,CAAEC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC;EAEtC,MAAMI,WAAW,GAAG,MACpB;IACI;IACAD,QAAQ,CAACE,KAAK,IAAIA,KAAK,GAAG,CAAC,CAAC,EAAC;EACjC,CAAC;;EAED,oBAAO;IAAA,wBACH;MAAA,6BAAqBH,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ,eAClC;MAAQ,OAAO,EAAGE,WAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC/C;AACV;AAAC,GAnBuBH,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}