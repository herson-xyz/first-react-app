{"ast":null,"code":"var _jsxFileName = \"/Users/project404/Studio/Github/first-react-app/src/Clicker.js\",\n  _s = $RefreshSig$();\n// Notes about useState and hooks -> \n// https://notes.herson.xyz/3+-+Studio+Notes/12/Documentation+-+First+React+App+-+2\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Clicker() {\n  _s();\n  var _localStorage$getItem;\n  // const countState = useState(0)                                       // A cleaner way to do this is to destructure. See example below:\n  // const count = countState[0]\n  // const setCount = countState[1]\n\n  const [count, setCount] = useState(parseInt((_localStorage$getItem = localStorage.getItem('count')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : 0)); // nullish coalescing operator -> If undefined, use 0\n\n  useEffect(() =>\n  // setting an empty array as the second argument for useEffect will entail that the function gets called only for the first render\n  {}, []);\n  useEffect(() =>\n  // use effect takes two arguments: 1. a function 2. an array that determines when useEffect should execute\n  {\n    localStorage.setItem('count', count);\n  }, [count]); // Here we're saying, \"execute when the count changes\"\n\n  const buttonClick = () => {\n    // setCount(value + 1)                                              // this method doesn't work as well with async processes. We can get stale values. For better results, use method below.\n    setCount(value => value + 1); // simplified arrow function, (value) => { return value + 1 }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Clicks count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: buttonClick,\n      children: \"Click Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n}\n_s(Clicker, \"aq10RlKwVbDRFvynY/eoQNLwh84=\");\n_c = Clicker;\nvar _c;\n$RefreshReg$(_c, \"Clicker\");","map":{"version":3,"names":["useEffect","useState","Clicker","count","setCount","parseInt","localStorage","getItem","setItem","buttonClick","value"],"sources":["/Users/project404/Studio/Github/first-react-app/src/Clicker.js"],"sourcesContent":["// Notes about useState and hooks -> \n// https://notes.herson.xyz/3+-+Studio+Notes/12/Documentation+-+First+React+App+-+2\n\nimport { useEffect, useState } from \"react\";\n\nexport default function Clicker()\n{\n    \n    // const countState = useState(0)                                       // A cleaner way to do this is to destructure. See example below:\n    // const count = countState[0]\n    // const setCount = countState[1]\n\n    const [count, setCount] = useState(parseInt(localStorage.getItem('count') ?? 0)) // nullish coalescing operator -> If undefined, use 0\n\n    useEffect(() =>                                                         // setting an empty array as the second argument for useEffect will entail that the function gets called only for the first render\n    {\n\n    }, [])\n\n    useEffect(() =>                                                         // use effect takes two arguments: 1. a function 2. an array that determines when useEffect should execute\n    {\n        localStorage.setItem('count', count)\n    }, [ count ])                                                           // Here we're saying, \"execute when the count changes\"\n\n    const buttonClick = () =>\n    {\n        // setCount(value + 1)                                              // this method doesn't work as well with async processes. We can get stale values. For better results, use method below.\n        setCount(value => value + 1)                                        // simplified arrow function, (value) => { return value + 1 }\n    }\n\n    return <div>\n        <div>Clicks count: { count }</div>\n        <button onClick={ buttonClick }>Click Me</button>\n    </div>\n}"],"mappings":";;AAAA;AACA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,eAAe,SAASC,OAAO,GAC/B;EAAA;EAAA;EAEI;EACA;EACA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAACI,QAAQ,0BAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,yEAAI,CAAC,CAAC,CAAC,EAAC;;EAEjFP,SAAS,CAAC;EAA8D;EACxE,CAEA,CAAC,EAAE,EAAE,CAAC;EAENA,SAAS,CAAC;EAA8D;EACxE;IACIM,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;EACxC,CAAC,EAAE,CAAEA,KAAK,CAAE,CAAC,EAA2D;;EAExE,MAAMM,WAAW,GAAG,MACpB;IACI;IACAL,QAAQ,CAACM,KAAK,IAAIA,KAAK,GAAG,CAAC,CAAC,EAAwC;EACxE,CAAC;;EAED,oBAAO;IAAA,wBACH;MAAA,6BAAqBP,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ,eAClC;MAAQ,OAAO,EAAGM,WAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC/C;AACV;AAAC,GA7BuBP,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}